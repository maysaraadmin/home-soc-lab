version: '3.8'

networks:
  cortex_network:
    driver: bridge

services:
  # Elasticsearch for Cortex
  cortex-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.7
    container_name: cortex-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.port=9200
      - transport.host=0.0.0.0
      - http.host=0.0.0.0
      - cluster.routing.allocation.disk.threshold_enabled=false
      - bootstrap.memory_lock=true
      - "discovery.zen.minimum_master_nodes=1"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    user: "1000:1000"
    volumes:
      - ./vol/elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - cortex_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for Cortex
  cortex-redis:
    image: redis:6.2-alpine
    container_name: cortex-redis
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - ./vol/redis_data:/data
    networks:
      - cortex_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL for Cortex
  cortex-postgres:
    image: postgres:13-alpine
    container_name: cortex-postgres
    environment:
      POSTGRES_USER: cortex
      POSTGRES_PASSWORD: cortex
      POSTGRES_DB: cortex
    volumes:
      - cortex_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cortex_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cortex -d cortex"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Cortex service
  cortex:
    image: thehiveproject/cortex:3.1.3
    container_name: cortex
    ports:
      - "9001:9001"
    depends_on:
      cortex-elasticsearch:
        condition: service_healthy
      cortex-redis:
        condition: service_healthy
      cortex-postgres:
        condition: service_healthy
    environment:
      - job_directory=/tmp/cortex-jobs
      - CORTEX_AUTH_PROVIDERS=local,apiKey,_anonymous
      - CORTEX_AUTH_ANONYMOUS_GROUP=read-only
      
      # Elasticsearch configuration - using HTTP only (port 9200)
      - CORTEX_ES_HOSTS=["http://cortex-elasticsearch:9200"]
      - CORTEX_ES_INDEX=cortex
      - CORTEX_ES_CLIENT_TIMEOUT=30s
      - CORTEX_ES_RETRY=3
      - CORTEX_ES_RETRY_INTERVAL=5s
      
      # Redis configuration
      - CORTEX_REDIS_URI=redis://cortex-redis:6379
      
      # Database configuration
      - CORTEX_DB_URL=jdbc:postgresql://cortex-postgres:5432/cortex
      - CORTEX_DB_USERNAME=cortex
      - CORTEX_DB_PASSWORD=cortex
      - CORTEX_SECRET=changeme
    volumes:
      - cortex_data:/data
      - cortex_logs:/var/log/cortex
      - ./cortex/application.conf:/etc/cortex/application.conf
    networks:
      - cortex_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for monitoring (optional)
  cortex-kibana:
    image: docker.elastic.co/kibana/kibana:7.17.7
    container_name: cortex-kibana
    environment:
      - CORTEX_ELASTICSEARCH_URI=http://cortex-elasticsearch:9200
      - SERVER_HOST=0.0.0.0
      - SERVER_NAME=cortex-kibana
    ports:
      - "5601:5601"
    depends_on:
      cortex-elasticsearch:
        condition: service_healthy
    networks:
      - cortex_network
    restart: unless-stopped

volumes:
  cortex_es_data:
  cortex_redis_data:
  cortex_postgres_data:
  cortex_data:
  cortex_logs:
