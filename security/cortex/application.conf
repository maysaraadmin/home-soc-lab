# Cortex Configuration

# Play Framework settings
play {
  http.secret.key = ${?CORTEX_SECRET}
  crypto.secret = ${?CORTEX_CRYPTO_SECRET}
  http.port = 9001
  http.port = ${?CORTEX_PORT}
  filters.hosts.allowed = [".+"]
  
  # Security headers
  filters.headers.contentSecurityPolicy = "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; connect-src 'self'"
  
  # Session configuration
  http.session = {
    secure = true
    httpOnly = true
    sameSite = "strict"
    maxAge = 24h
  }
}

# Database configuration
db {
  default {
    driver = org.postgresql.Driver
    url = ${?CORTEX_DB_URL}
    username = ${?CORTEX_DB_USERNAME}
    password = ${?CORTEX_DB_PASSWORD}
    
    # HikariCP connection pool settings
    hikaricp {
      connectionTimeout = 30000
      maximumPoolSize = 10
      minimumIdle = 2
      idleTimeout = 600000
      maxLifetime = 1800000
      leakDetectionThreshold = 60000
      connectionTestQuery = "SELECT 1"
    }
    
    # Connection pool settings
    numThreads = 10
    connectionPool = "HikariCP"
    
    # Connection settings
    connectionTimeout = 30s
    idleTimeout = 10m
    maxLifetime = 1h
    
    # JDBC properties
    properties = {
      socketTimeout = 30s
      loginTimeout = 30s
      connectTimeout = 30s
    }
  }
}

# Authentication configuration
auth {
  # Authentication providers in order of preference (first match wins)
  providers = [
    {
      name = local
      isEnabled = true
    },
    {
      name = key
      isEnabled = true
    },
    {
      name = _anonymous
      isEnabled = ${?CORTEX_AUTH_ANONYMOUS_ENABLED}
      group = ${?CORTEX_AUTH_ANONYMOUS_GROUP}
    }
  ]
  
  # Session configuration
  session = {
    timeout = 24h
    cookie = {
      secure = true
      httpOnly = true
      maxAge = 24h
    }
  }
  
  # Rate limiting
  rateLimit = {
    enabled = true
    requests = 100
    window = 1m
  }
}

# Analyzers configuration
analyzers {
  # Path to the analyzers directory
  path = "/opt/Cortex-Analyzers/analyzers"
  path = ${?CORTEX_ANALYZERS_PATH}

  # Number of concurrent jobs per analyzer
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 10
  }
  
  # Analyzer configuration
  jobTimeout = 15 minutes
  jobTimeout = ${?CORTEX_ANALYZER_JOB_TIMEOUT}
  
  # Cache configuration
  cache {
    enabled = true
    ttl = 1h
    ttl = ${?CORTEX_ANALYZER_CACHE_TTL}
  }
  
  # Rate limiting
  rateLimit = {
    enabled = true
    requests = 10
    window = 1m
  }
}

# Responders configuration
responders {
  # Path to the responders directory
  path = "/opt/Cortex-Analyzers/responders"
  path = ${?CORTEX_RESPONDERS_PATH}
  
  # Responder configuration
  jobTimeout = 10 minutes
  jobTimeout = ${?CORTEX_RESPONDER_JOB_TIMEOUT}
  
  # Rate limiting
  rateLimit = {
    enabled = true
    requests = 5
    window = 1m
  }
}

# Job configuration
job {
  # Directory where job data is stored
  directory = "/tmp/cortex-jobs"
  directory = ${?CORTEX_JOB_DIRECTORY}

  # Cleanup configuration
  cleanup {
    # Maximum age of job data
    max-age = 24h
    max-age = ${?CORTEX_JOB_MAX_AGE}
    
    # Cleanup interval
    interval = 1h
    interval = ${?CORTEX_JOB_CLEANUP_INTERVAL}
    
    # Maximum number of jobs to keep
    max-jobs = 10000
    max-jobs = ${?CORTEX_JOB_MAX_JOBS}
  }
  
  # Job execution configuration
  execution {
    # Maximum number of retries for failed jobs
    maxRetries = 3
    
    # Delay between retries
    retryDelay = 1m
  }
}

# Elasticsearch configuration
search {
  # Elasticsearch hosts
  hosts = ["http://cortex-elasticsearch:9200"]
  hosts = ${?CORTEX_ES_HOSTS}

  # Index name
  index = "cortex"
  index = ${?CORTEX_ES_INDEX}

  # Connection settings
  client {
    timeout = 30s
    timeout = ${?CORTEX_ES_CLIENT_TIMEOUT}
    retry = 3
    retry = ${?CORTEX_ES_RETRY}
    retry-interval = 5s
    retry-interval = ${?CORTEX_ES_RETRY_INTERVAL}
  }
}

# Redis configuration
redis {
  # Redis URI
  uri = "redis://cortex-redis:6380"
  uri = ${?CORTEX_REDIS_URI}
}

# Logging configuration
logger {
  # Root logger
  root = ERROR
  root = ${?CORTEX_LOG_LEVEL}

  # Application logger
  application = INFO
  application = ${?CORTEX_LOG_LEVEL}

  # Play logger
  play = INFO
  play = ${?CORTEX_LOG_LEVEL}

  # Akka logger
  akka = WARNING
  akka = ${?CORTEX_AKKA_LOG_LEVEL}
}

# HTTP client configuration
http-client {
  # User agent
  user-agent = "Cortex/3.1.3"

  # Timeout settings
  timeout = 30s
  timeout = ${?CORTEX_HTTP_CLIENT_TIMEOUT}

  # Proxy settings
  proxy {
    host = ${?CORTEX_HTTP_PROXY_HOST}
    port = ${?CORTEX_HTTP_PROXY_PORT}
    non-proxy-hosts = ${?CORTEX_HTTP_NON_PROXY_HOSTS}
  }
}

# Metrics configuration
metrics {
  # Enable/disable metrics
  enabled = true
  enabled = ${?CORTEX_METRICS_ENABLED}

  # JMX reporting
  jmx {
    enabled = true
    enabled = ${?CORTEX_METRICS_JMX_ENABLED}
  }
}

# Cache configuration
cache {
  # Default cache TTL
  ttl = 1h
  ttl = ${?CORTEX_CACHE_TTL}
}

# Security headers
security.headers {
  # Enable/disable security headers
  enabled = true
  enabled = ${?CORTEX_SECURITY_HEADERS_ENABLED}

  # Content Security Policy
  csp = "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; connect-src 'self'"
  csp = ${?CORTEX_CSP_HEADER}
}

# CORS configuration
cors {
  # Enable/disable CORS
  enabled = false
  enabled = ${?CORTEX_CORS_ENABLED}

  # Allowed origins
  allowed-origins = ["*"]
  allowed-origins = ${?CORTEX_CORS_ALLOWED_ORIGINS}
}
