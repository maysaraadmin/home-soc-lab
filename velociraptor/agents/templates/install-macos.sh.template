#!/bin/bash
# CyberBlue Velociraptor Agent Installation Script for macOS
# Generated for server: {{SERVER_IP}}
# This script must be run as root or with sudo

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SERVER_IP="{{SERVER_IP}}"
INSTALL_DIR="/usr/local/sbin"
CONFIG_DIR="/etc/velociraptor"
CONFIG_FILE="$CONFIG_DIR/client.config.yaml"
PLIST_NAME="com.velocidex.velociraptor"
PLIST_FILE="/Library/LaunchDaemons/${PLIST_NAME}.plist"
VELOCI_BIN="$INSTALL_DIR/velociraptor"

echo -e "${CYAN}========================================${NC}"
echo -e "${CYAN}CyberBlue Velociraptor Agent Installer${NC}"
echo -e "${CYAN}Server: ${SERVER_IP}:8000${NC}"
echo -e "${CYAN}========================================${NC}"
echo ""

# Function to print colored messages
print_status() {
    echo -e "${CYAN}[*]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[✓]${NC} $1"
}

print_error() {
    echo -e "${RED}[✗]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   print_error "This script must be run as root or with sudo"
   echo "Please run: sudo $0"
   exit 1
fi

# Check if running on macOS
if [[ "$OSTYPE" != "darwin"* ]]; then
    print_error "This script is for macOS only!"
    exit 1
fi

print_status "Detected macOS $(sw_vers -productVersion)"

# Install dependencies
install_dependencies() {
    print_status "Checking dependencies..."
    
    if ! command -v curl &> /dev/null; then
        print_error "curl not found. Please install Command Line Tools."
        echo "Run: xcode-select --install"
        exit 1
    fi
    
    print_success "Dependencies OK"
}

# Download Velociraptor binary
download_velociraptor() {
    print_status "Downloading Velociraptor binary..."
    
    # Detect architecture
    ARCH=$(uname -m)
    if [[ "$ARCH" == "arm64" ]]; then
        BINARY_TYPE="darwin-arm64"
        print_status "Detected Apple Silicon (M1/M2)"
    else
        BINARY_TYPE="darwin-amd64"
        print_status "Detected Intel processor"
    fi
    
    # Get latest release URL
    RELEASE_URL=$(curl -s https://api.github.com/repos/Velocidex/velociraptor/releases/latest | \
                  grep "browser_download_url.*${BINARY_TYPE}" | \
                  cut -d '"' -f 4 | head -n 1)
    
    if [ -z "$RELEASE_URL" ]; then
        print_error "Could not find download URL for $BINARY_TYPE"
        exit 1
    fi
    
    print_status "Downloading from: $RELEASE_URL"
    
    if curl -L -o /tmp/velociraptor "$RELEASE_URL"; then
        # Create install directory if it doesn't exist
        mkdir -p "$INSTALL_DIR"
        
        chmod +x /tmp/velociraptor
        mv /tmp/velociraptor "$VELOCI_BIN"
        
        # Remove quarantine attribute (macOS security)
        xattr -d com.apple.quarantine "$VELOCI_BIN" 2>/dev/null || true
        
        print_success "Binary downloaded and installed to $VELOCI_BIN"
    else
        print_error "Failed to download Velociraptor"
        exit 1
    fi
}

# Create configuration directory and file
install_config() {
    print_status "Installing configuration..."
    
    # Create config directory
    mkdir -p "$CONFIG_DIR"
    
    # Check if config file exists in current directory
    if [ -f "./client.config.yaml" ]; then
        cp "./client.config.yaml" "$CONFIG_FILE"
        chmod 600 "$CONFIG_FILE"
        chown root:wheel "$CONFIG_FILE"
        print_success "Configuration installed to $CONFIG_FILE"
    else
        print_error "client.config.yaml not found in current directory!"
        print_warning "Please ensure client.config.yaml is in the same directory as this script"
        exit 1
    fi
}

# Create LaunchDaemon plist
create_launchdaemon() {
    print_status "Creating LaunchDaemon..."
    
    cat > "$PLIST_FILE" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>${PLIST_NAME}</string>
    
    <key>ProgramArguments</key>
    <array>
        <string>${VELOCI_BIN}</string>
        <string>--config</string>
        <string>${CONFIG_FILE}</string>
        <string>client</string>
    </array>
    
    <key>RunAtLoad</key>
    <true/>
    
    <key>KeepAlive</key>
    <true/>
    
    <key>StandardOutPath</key>
    <string>/var/log/velociraptor.log</string>
    
    <key>StandardErrorPath</key>
    <string>/var/log/velociraptor.error.log</string>
    
    <key>ProcessType</key>
    <string>Interactive</string>
</dict>
</plist>
EOF

    chmod 644 "$PLIST_FILE"
    chown root:wheel "$PLIST_FILE"
    print_success "LaunchDaemon created"
}

# Stop existing service if running
stop_existing_service() {
    if launchctl list | grep -q "$PLIST_NAME"; then
        print_status "Stopping existing service..."
        launchctl unload "$PLIST_FILE" 2>/dev/null || true
        print_success "Service stopped"
    fi
}

# Start service
start_service() {
    print_status "Starting Velociraptor service..."
    
    launchctl load "$PLIST_FILE"
    
    sleep 2
    
    if launchctl list | grep -q "$PLIST_NAME"; then
        print_success "Service started successfully!"
    else
        print_warning "Service may not be running. Check logs at /var/log/velociraptor.log"
    fi
}

# Verify installation
verify_installation() {
    print_status "Verifying installation..."
    
    if [ -f "$VELOCI_BIN" ]; then
        print_success "Binary installed: $VELOCI_BIN"
    else
        print_error "Binary not found!"
        return 1
    fi
    
    if [ -f "$CONFIG_FILE" ]; then
        print_success "Config installed: $CONFIG_FILE"
    else
        print_error "Config not found!"
        return 1
    fi
    
    if [ -f "$PLIST_FILE" ]; then
        print_success "LaunchDaemon installed: $PLIST_FILE"
    else
        print_error "LaunchDaemon not found!"
        return 1
    fi
    
    if launchctl list | grep -q "$PLIST_NAME"; then
        print_success "Service is running"
    else
        print_error "Service is not running"
        return 1
    fi
}

# Main installation flow
main() {
    print_status "Step 1: Checking dependencies..."
    install_dependencies
    echo ""
    
    print_status "Step 2: Downloading Velociraptor..."
    download_velociraptor
    echo ""
    
    print_status "Step 3: Installing configuration..."
    install_config
    echo ""
    
    print_status "Step 4: Stopping existing service (if any)..."
    stop_existing_service
    echo ""
    
    print_status "Step 5: Creating LaunchDaemon..."
    create_launchdaemon
    echo ""
    
    print_status "Step 6: Starting service..."
    start_service
    echo ""
    
    print_status "Step 7: Verifying installation..."
    verify_installation
    echo ""
    
    echo -e "${CYAN}========================================${NC}"
    echo -e "${GREEN}Installation Complete!${NC}"
    echo -e "${CYAN}========================================${NC}"
    echo ""
    echo -e "Installation Details:"
    echo -e "  • Server: ${SERVER_IP}:8000"
    echo -e "  • Binary: $VELOCI_BIN"
    echo -e "  • Config: $CONFIG_FILE"
    echo -e "  • LaunchDaemon: $PLIST_FILE"
    echo ""
    echo -e "Useful Commands:"
    echo -e "  • Check status:   launchctl list | grep velociraptor"
    echo -e "  • View logs:      tail -f /var/log/velociraptor.log"
    echo -e "  • View errors:    tail -f /var/log/velociraptor.error.log"
    echo -e "  • Restart:        sudo launchctl unload $PLIST_FILE && sudo launchctl load $PLIST_FILE"
    echo -e "  • Stop:           sudo launchctl unload $PLIST_FILE"
    echo ""
    echo -e "${GREEN}The agent should now appear in the Velociraptor server console.${NC}"
    echo -e "${GREEN}Log in to: https://${SERVER_IP}:7000${NC}"
    echo ""
}

# Run main function
main

exit 0

